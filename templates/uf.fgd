@PointClass base(Targetname, Origin) = gmod_track_uf_platform : "Train Platform"
[
	StationIndex(integer) : "Station index" : 100 : "Index of station (three-digit number: IBIS table index number)"
	PlatformIndex(integer) : "Platform index" : 1 : "Index of platform (1: left, 2: right, 3: ...)"
	PlatformStart(target_destination) : "Start of the platform"
	PlatformEnd(target_destination) : "End of the platform"
	PopularityIndex(float) : "Station popularity index" : "1.0" : "Total number of people who use station per day, normalized to average number of people using stations per day"
	StepsType(choices) : "Are steps required on this station, and which" : 0 : "Some stations have not received any platform upgrades and may require trains that support folding steps. Passengers will not board if steps aren't available or extended." =
	[
    		0 : "Completely High Floor"
    		1 : "Medium"
		2 : "Street Level"
	]
]
@PointClass base(Targetname, Origin) studioprop("models/lilly/uf/stations/dfi.mdl") = gmod_track_uf_dfi : "Lumino Station Display (Frankfurt Version)"
[
	StationIndex(integer) : "Station index" : 100 : "Index of station (three-digit number: IBIS table index number)"
	PlatformIndex(integer) : "Platform index" : 1 : "Index of platform (1: left, 2: right, 3: ...)"
	PlatformStart(target_destination) : "Start of the platform (arrival side)"
	PlatformEnd(target_destination) : "End of the platform (departure side)"
	ParentDisplay(target_destination) : "Entity that this display should be subordinate to"
	ThemeName(string) : "Theme" : "Frankfurt" : "Set the display's city theme which alters its behaviour. Essen, Frankfurt, Duesseldorf, Hannover"
	Type(Choices) : "Type" : "pole" : "Select whether the display spawns mounted on a pole or not" =
	[
		"pole" : "With Pole"
		"nopole" : "Without Pole"
	]
]
@PointClass base(Targetname, Origin ) studioprop("models/lilly/uf/tram/sgauge/switch_motor.mdl") = gmod_track_uf_switch : "Trackside Switch"
[
	DefaultPosition(Choices) : "Default Position" : "main" : "Set switch to main/alt by default" =
	[
		"main" : "Main"
		"alt" : "Alt"
	]
	PositionCorrespondance(Choices) : "Position Correspondance" : "main" : "Which Position Corresponds to Left setting" =
	[
		"main" : "Main"
		"alt" : "Alt"
	]
	StraightPosition(Choices) : "Direction to Declare as straight" : "left" : "Which direction a connected track signal should consider to be straight" =
	[
		"left" : "Left"
		"right" : "Right"
	]
	SwitchID(integer) : "Switch Number" : 000 : "Set switch ID for identification via RBL routing table"
	Blade1(target_destination) : "Blade 1"
	Blade2(target_destination) : "Blade 2"
	AllowSwitchingIron(choices) : "Allow to be switched manually by the switching iron" : 0 : "Some switches are prototypically not switchable with the iron, so disable it here as needed." =
	[
    		0 : "No"
    		1 : "Yes"
	]
	ReverseTrackOrientationLogic(choices) : "Reverse the direction the entity scans for branching tracks" : 0 : "This is so that if the entity turns out to never find its branching paths, you are able to reverse the direction it scans" =
	[
    		0 : "No"
    		1 : "Yes"
	]
]
@PointClass base(Targetname, Origin ) studioprop("models/lilly/uf/signage/point_contact.mdl") = gmod_track_uf_switch_contact : "Trackside Switch Trigger"
[
	DefaultPosition(Choices) : "Default Position" : "Set switch to main/alt by default" : "main" =
	[
		"main" : "Main"
		"alt" : "Alt"
	]
	SecondaryAutomaticSwitching(Choices) : "Automatic Switching" : "no" : "Select whether this trigger is intended as a lower priority trigger and which way it should trigger" =
	[
		"no" : "none"
		"left" : "Left"
		"right" : "Right"
	]
	Invisible(choices) : "Invisible" : 0 =
	[
    		0 : "No"
    		1 : "Yes"
	]
	SwitchID(integer) : "Switch Number" : 000 : "Set switch ID for identification via RBL routing table"
	SwitchEnt(target_name_or_class) : "Switch Entity to associate with"
]
@PointClass base(Targetname, Origin ) studioprop("models/lilly/mplr/signals/traffliclight/trafficlight_pole.mdl") = gmod_track_mplr_switch_lantern : "Switch Signal"
[
	PairedSwitch(target_destination) : "Switch to pair to"
	StraightPosition(Choices) : "Direction that represents Straight" : "left" : "Select which direction is supposed to be straight on the signal" =
	[
		"left" : "Left"
		"right" : "Right"
	]
	VerticalOffset(float) : "Vertical Offset" : 0 : "How much to offset the clientside models by vertically in-game. Do not place the entity in hammer anywhere but in the middle and on the surface of the track!"
	HorizontalOffset(float) : "Horizontal Offset" : 0 : "How much to offset the clientside models by horizontally in-game. Do not place the entity in hammer anywhere but in the middle and on the surface of the track!"
	VerticalOffset(float) : "Vertical Offset" : 0 : "How much to rotate the clientside models by in-game. Do not rotate the entity in Hammer except facing forwards or backwards on the track!"
]